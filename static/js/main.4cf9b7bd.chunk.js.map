{"version":3,"sources":["Form/Form.js","Tasks/Tasks.js","Buttons/Buttons.js","Section/Section.js","Header/Header.js","Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","className","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","key","id","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4cf9b7bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './form.css';\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState('');\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent('');\r\n  };\r\n\r\n  return (\r\n    <form \r\n      onSubmit={onFormSubmit}\r\n      className='form'\r\n    >\r\n      <input\r\n        value={newTaskContent}\r\n        className='form__input' placeholder='co jest do zrobienia?'\r\n        onChange={({ target }) => setNewTaskContent(target.value)} \r\n      />\r\n      <button className='form__button'>Dodaj zadanie</button>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Tasks.css';\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone}) => (\r\n  <ul className='tasks'>\r\n    {tasks.map(task => (\r\n      <li \r\n        className={`tasks__item ${task.done && hideDone ? 'tasks__item--hidden' : ''}`} \r\n        key={task.id}\r\n      >\r\n        <button\r\n          onClick={() => toggleTaskDone(task.id)} \r\n          className={'tasks__button tasks__button--toggleDone'}\r\n        >\r\n          {task.done ? 'âœ”' : ''}\r\n        </button>\r\n        <span \r\n          className={`tasks__content ${task.done ? 'tasks__content--done': ''}`}\r\n        >\r\n          {task.content}\r\n        </span>\r\n        <button\r\n          onClick={() => removeTask(task.id)} \r\n          className={'tasks__button tasks__button--remove'}\r\n        >\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n  tasks.length > 0 && (\r\n    <div className='buttons'>\r\n      <button\r\n        onClick={toggleHideDone}\r\n        className={'buttons__button'}\r\n      >\r\n        {hideDone ? 'PokaÅ¼ ' : 'Ukryj '}\r\n        ukoÅ„czone\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className={'buttons__button'}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </button>\r\n    </div>\r\n  )\r\n)\r\nexport default Buttons;","import React from 'react';\r\nimport './Section.css';\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <section className='section'>\r\n    <header className='section__header'>\r\n      <h2 className='section__title'>{title}</h2>\r\n      {extraHeaderContent}\r\n    </header>\r\n    <div className='section__body'>\r\n      {body}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst Header =({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\n\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Container.css';\r\n\r\nconst Container = ({children}) => (\r\n    <main className='container'>\r\n        {children}\r\n    </main>\r\n);\r\n\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from './Form/Form.js';\nimport Tasks from './Tasks/Tasks.js'\nimport Buttons from './Buttons/Buttons.js'\nimport Section from './Section/Section.js';\nimport Header from './Header/Header.js'\nimport Container from './Container/Container.js'\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(\n    [\n      { id: 1, content: 'kupiÄ‡ cytryny', done: true },\n      { id: 2, content: 'kupiÄ‡ kostki lodu', done: false },\n      { id: 3, content: 'posprzÄ…taÄ‡ mieszkanie', done: false },\n    ]\n  );\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })))\n  };\n  \n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n    },\n    ]);\n  };\n\n  return (\n    <Container className='container'>\n      <Header title='Lista zadaÅ„' />\n      <Section\n        title='Dodaj zadanie'\n        body={\n          <Form addNewTask={addNewTask}/>\n        }\n      />\n      <Section\n        title='Lista zadaÅ„'\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}